@using Application.UseCases.Payment.Queries.GetPaymentsWithPagination
@model Application.Common.Models.PaginatedList<Domain.Entities.Payment>

<h3>Payments</h3>

@foreach (var payment in Model.Items)
{
<div>
    <p>Id: @payment.Id</p>
    <p>Type: @payment.Type</p>
    <p>Allowed: @payment.Allowed</p>
    <a asp-action="Get" asp-controller="Order" asp-route-id="@payment.OrderId"><p>Order id: @payment.OrderId</p></a>

    @if (Model.Items.Count is 1 && Model.TotalPages > 1)
    {
        <a asp-action="Update" asp-controller="Payment" asp-route-id="@payment.Id"
           asp-route-returnUrl="@Url.PageLink(null, null, new {PageNumber = Model.PageNumber - 1, Model.PageSize})">Edit</a>
        <a asp-action="Delete" asp-controller="Payment" asp-route-id="@payment.Id"
           asp-route-returnUrl="@Url.PageLink(null, null, new {PageNumber = Model.PageNumber - 1, Model.PageSize})">Delete</a>
    }
    else
    {
        <a asp-action="Update" asp-controller="Payment" asp-route-id="@payment.Id"
           asp-route-returnUrl="@Url.PageLink(null, null, new {Model.PageNumber, Model.PageSize})">Edit</a>
        <a asp-action="Delete" asp-controller="Payment" asp-route-id="@payment.Id"
           asp-route-returnUrl="@Url.PageLink(null, null, new {Model.PageNumber, Model.PageSize})">Delete</a>
    }
</div>
}

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                @Html.ActionLink("Previous", "Index", "Payment",
                new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Previous", "Index", "Payment",
                new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                new { @class = "page-link" })
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">
                    @Html.ActionLink($"{i}", "Index", "Payment",
                    new GetPaymentsWithPaginationQuery { PageNumber = i },
                    new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item">
                    @Html.ActionLink($"{i}", "Index", "Payment",
                    new GetPaymentsWithPaginationQuery { PageNumber = i },
                    new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">
                @Html.ActionLink("Next", "Index", "Payment",
                new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Next", "Index", "Payment",
                new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                new { @class = "page-link" })
            </li>
        }
    </ul>
</nav>

<div>
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("Previous page", "Index", "Payment",
            new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber - 1 })
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next page", "Index", "Payment",
            new GetPaymentsWithPaginationQuery { PageNumber = Model.PageNumber + 1 })
    }
</div>