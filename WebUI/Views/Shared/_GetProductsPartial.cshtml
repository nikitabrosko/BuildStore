@using Application.UseCases.Product.Queries.GetPaginatedProductsWithSubcategory
@model WebUI.Models.ProductsPartialModel

<h3>@ViewBag.NameForProductsPage</h3>

<div class="subcategory-main">
    <div class="subcategory-left-main">
        <h4>@Model.Category.Name</h4>
        <div class="subcategory-left-list">
            @foreach (var subcategory in Model.Category.Subcategories)
            {
                <div>
                    <i class="fas fa-long-arrow-alt-right"></i>
                    <a asp-action="Get" asp-controller="Subcategory" asp-route-id="@subcategory.Id">@subcategory.Name</a>
                </div>
            }
        </div>
    </div>
    <div class="subcategory-right-main">
        @foreach (var product in Model.Products.Items)
        {
            <a asp-action="Get" asp-controller="Product" asp-route-id="@product.Id">
                <div>@product.Name</div>
                <div>
                    @{
                        var productImages = product.Images
                            .Select(image => $"data:image/gif;base64,{Convert.ToBase64String(image.Picture)}");
                    }

                    <img src="@productImages.First()" style="max-width: 300px" alt="@product.Name" />
                </div>
                <div>@product.Price</div>
            </a>
            @if (User.IsInRole("user"))
            {
                <div id="but-wrap">
                    <button onclick="jQueryAjaxAddProductAndRefreshProductsCount('@Url.Action("AddProductGet", "ShoppingCart",
                                                                                      new {id = product.Id}, Context.Request.Scheme)', true, 'addProductToShoppingCart',
                                                                                          '@Url.Action("GetShoppingCartWithProductsCount", "ShoppingCart", 
                                                                                               null, Context.Request.Scheme)', '#shoppingCartAndProductsCount')"
                            tabindex="0" role="button" class="addToCart clear-button" id="addProductToShoppingCart">
                        <i class="fa fa-shopping-cart"></i>
                    </button>
                </div>
            }
            else if (User.IsInRole("admin"))
            {
                <button tabindex="0" role="button" data-toggle="popover"
                        data-trigger="focus" title="Ошибка" class="clear-button"
                        data-content="В роли администратора нельзя добавлять товары в корзину">
                    <i class="fa fa-shopping-cart"></i>
                </button>
            }
            else
            {
                <button tabindex="0" role="button" data-toggle="popover"
                        data-trigger="focus" title="Ошибка" class="clear-button"
                        data-content="Чтобы добавить товар в корзину необходимо авторизоваться!">
                    <i class="fa fa-shopping-cart"></i>
                </button>
            }
        }
    </div>
</div>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.Products.HasPreviousPage)
        {
            <li class="page-item">
                @Html.ActionLink("Previous", "GetProducts", "Product",
                new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = Model.Products.PageNumber - 1 },
                new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Previous", "GetProducts", "Product",
                    new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = Model.Products.PageNumber - 1 },
                new { @class = "page-link" })
            </li>
        }
        @for (int i = 1; i <= Model.Products.TotalPages; i++)
        {
            if (Model.Products.PageNumber.Equals(i))
            {
                <li class="page-item active">
                    @Html.ActionLink($"{i}", "GetProducts", "Product",
                        new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = i },
                    new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item">
                    @Html.ActionLink($"{i}", "GetProducts", "Product",
                        new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = i },
                    new { @class = "page-link" })
                </li>
            }
        }
        @if (Model.Products.HasNextPage)
        {
            <li class="page-item">
                @Html.ActionLink("Next", "GetProducts", "Product",
                    new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = Model.Products.PageNumber + 1 },
                new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item disabled">
                @Html.ActionLink("Next", "GetProducts", "Product",
                    new GetPaginatedProductsWithSubcategoryQuery { SubcategoryId = ViewBag.SubcategoryId, PageNumber = Model.Products.PageNumber + 1 },
                new { @class = "page-link" })
            </li>
        }
    </ul>
</nav>