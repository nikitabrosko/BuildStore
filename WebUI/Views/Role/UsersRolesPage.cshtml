@model Application.Common.Models.PaginatedList<UserWithRolesDto>
@using System.Text
@using Application.UseCases.Identity.Role.Queries.GetUsersWithRolesWithPagination

<h2 style="text-align: center;margin: 2%;">Пользователи и их роли</h2>

<table class="table">
    <thead class="thead-dark">
    <tr>
        <th scope="col">Имя пользователя</th>
        <th scope="col">Роли пользователя</th>
        <th scope="col">Добавление ролей</th>
        <th scope="col">Удаление ролей</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var user in Model.Items)
    {
        <tr>
            <td>@user.Name</td>
            <td>
                @{
                    var roles = new StringBuilder();

                    foreach (var role in user.Roles)
                    {
                        roles.Append($"{role}, ");
                    }

                    var rolesString = roles.ToString().Trim(new[]{' ', ','});
                }
                
                @if (!string.IsNullOrWhiteSpace(rolesString))
                {
                    <b>@rolesString</b>
                }
                else
                {
                    <b>No roles</b>
                }
            </td>
            <td>
                <a onclick="showInPopup('@Url.Action("AddRoleToUser", "Role", new { id = user.Id },
                                             Context.Request.Scheme)', 'Добавить роль')">
                    Добавить роль
                </a>
            </td>
            <td>
                <a onclick="showInPopup('@Url.Action("RemoveRoleFromUser", "Role", new { id = user.Id },
                                             Context.Request.Scheme)', 'Удалить роль')">
                    Удалить роль
                </a>
            </td>
        </tr>
    }
    </tbody>
</table>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                @Html.ActionLink("Previous", "UsersRolesPage", "Role",
                new GetUsersWithRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                new { @class = "page-link" })
        </li>
    }
    else
    {
        <li class="page-item disabled">
            @Html.ActionLink("Previous", "UsersRolesPage", "Role",
            new GetUsersWithRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
            new { @class = "page-link" })
    </li>
}
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">
                    @Html.ActionLink($"{i}", "UsersRolesPage", "Role",
                    new GetUsersWithRolesWithPaginationQuery { PageNumber = i },
                    new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item">
                @Html.ActionLink($"{i}", "UsersRolesPage", "Role",
                new GetUsersWithRolesWithPaginationQuery { PageNumber = i },
                new { @class = "page-link" })
        </li>
    }
}
        @if (Model.HasNextPage)
        {
            <li class="page-item">
                @Html.ActionLink("Next", "UsersRolesPage", "Role",
                new GetUsersWithRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                new { @class = "page-link" })
        </li>
    }
    else
    {
        <li class="page-item disabled">
            @Html.ActionLink("Next", "UsersRolesPage", "Role",
            new GetUsersWithRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
            new { @class = "page-link" })
    </li>
}
    </ul>
</nav>