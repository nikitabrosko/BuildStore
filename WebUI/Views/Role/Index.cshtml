@using Application.UseCases.Identity.Role.Queries.GetRolesWithPagination
@model Application.Common.Models.PaginatedList<Microsoft.AspNetCore.Identity.IdentityRole>

<h2 style="text-align: center;margin: 2%;">Роли</h2>

<div style="text-align: center; margin: 2%;">
    <button class="btn btn-dark" style="width: 30%;"
            onclick="showInPopup('@Url.Action("Create", "Role", null,
                                      Context.Request.Scheme)', 'Создать роль')">
        Создать роль
    </button>
</div>

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Название</th>
            <th scope="col">Редактирование</th>
            <th scope="col">Удаление</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var role in Model.Items)
    {
        <tr>
            <td>@role.Id</td>
            <td>@role.Name</td>
            <td>
                <a onclick="showInPopup('@Url.Action("Update", "Role", new { id = role.Id },
                                                  Context.Request.Scheme)', 'Редактировать роль')">
                    Редактировать
                </a>
            </td>
            <td>
                <a asp-action="Delete" asp-controller="Role" asp-route-id="@role.Id" style="color:red">Удалить</a>
            </td>
        </tr>
    }
    </tbody>
</table>

<nav>
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                @Html.ActionLink("Previous", "Index", "Role",
                new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
                new { @class = "page-link" })
        </li>
    }
    else
    {
        <li class="page-item disabled">
            @Html.ActionLink("Previous", "Index", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 },
            new { @class = "page-link" })
    </li>
}
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            if (Model.PageNumber.Equals(i))
            {
                <li class="page-item active">
                    @Html.ActionLink($"{i}", "Index", "Role",
                    new GetRolesWithPaginationQuery { PageNumber = i },
                    new { @class = "page-link" })
            </li>
        }
        else
        {
            <li class="page-item">
                @Html.ActionLink($"{i}", "Index", "Role",
                new GetRolesWithPaginationQuery { PageNumber = i },
                new { @class = "page-link" })
        </li>
    }
}
        @if (Model.HasNextPage)
        {
            <li class="page-item">
                @Html.ActionLink("Next", "Index", "Role",
                new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
                new { @class = "page-link" })
        </li>
    }
    else
    {
        <li class="page-item disabled">
            @Html.ActionLink("Next", "Index", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 },
            new { @class = "page-link" })
    </li>
}
    </ul>
</nav>

<div>
    @if (Model.HasPreviousPage)
    {
        @Html.ActionLink("Previous page", "Index", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber - 1 })
    }
    @if (Model.HasNextPage)
    {
        @Html.ActionLink("Next page", "Index", "Role",
            new GetRolesWithPaginationQuery { PageNumber = Model.PageNumber + 1 })
    }
</div>